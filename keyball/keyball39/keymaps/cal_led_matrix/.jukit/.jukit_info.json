{"cmd": "import os\nimport math\nimport pandas as pd\nimport numpy as np\n\nfile_path = \"./led_matrix.csv\"\ndf = pd.read_csv(file_path, header=None)\n\n# Convert DataFrame to list\ndf_list = df.values.tolist()\n\n# Get size of the matrix\nlen_rows = len(df_list) - 1  # Exclude the last row: backlights\nlen_cols = len(df_list[0])\n\n# Get maximum value in the df_list\nmax_val = int(max([max(row) for row in df_list]))\n\n\ndef get_led_position(row: int, col: int) -> tuple[int, int]:\n    QMK_MAX_WIDTH = 224\n    QMK_MAX_HEIGHT = 64\n\n    # Calculate the position of the LED\n    _x = (QMK_MAX_WIDTH / (len_cols - 1)) * col\n    _y = (QMK_MAX_HEIGHT / (len_rows - 1)) * row\n\n    x = int(round(_x))\n    y = int(round(_y))\n    return x, y\n\n\noutput_led_position = \"led_position.txt\"\noutput_led_status = \"led_status.txt\"\n\nLED_MAX_NUM_ONE_HAND = 24\nLED_MAX_NUM = LED_MAX_NUM_ONE_HAND * 2\n\n\ndef is_nan(item):\n    return item == \"nan\" or math.isnan(item)\n\n\ndef create_string_led_position(x, y, target):\n    return \"{{{},{}}}\".format(x, y).ljust(17) + f\", //{target}\"\n\n\ndef create_string_led_status(target, bool_val):\n    if bool_val:\n        return \"LED_FLAG_KEYLIGHT\".ljust(17) + f\", //{target}\"\n    else:\n        return \"LED_FLAG_NONE\".ljust(17) + f\", //{target}\"\n\n\ndef write_and_print(f, string):\n    f.write(string + \"\\n\")\n    print(string)\n\n\n# If outputs exist, delete them\nif os.path.exists(output_led_position):\n    os.remove(output_led_position)\nif os.path.exists(output_led_status):\n    os.remove(output_led_status)\n\n\ntarget_list = list(range(0, LED_MAX_NUM))\nwith open(output_led_position, \"a\") as f:\n    with open(output_led_status, \"a\") as f_status:\n        for target in target_list:\n            if target > max_val:\n                x, y = 0, 0\n                led_position = create_string_led_position(x, y, target)\n                write_and_print(f, led_position)\n\n                is_led = False\n                led_status = create_string_led_status(target, is_led)\n                write_and_print(f_status, led_status)\n\n            for row, row_items in enumerate(df_list):\n                for col, item in enumerate(row_items):\n                    if is_nan(item):\n                        continue\n\n                    item = int(item)\n                    if item == target:\n                        if row == 4:  # Handle back light\n                            x, y = 0, 0\n                            is_led = False\n                        else:\n                            x, y = get_led_position(row, col)\n                            is_led = True\n\n                        led_position = create_string_led_position(x, y, target)\n                        write_and_print(f, led_position)\n\n                        led_status = create_string_led_status(target, is_led)\n                        write_and_print(f_status, led_status)", "cmd_opts": " --cell_id=NONE", "import_complete": 1, "terminal": "nvimterm"}